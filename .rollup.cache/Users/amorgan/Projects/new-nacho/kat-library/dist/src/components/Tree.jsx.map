{"version":3,"file":"Tree.jsx","sourceRoot":"","sources":["../../../src/components/Tree.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Group } from '@visx/group';\nimport {\n  Treemap,\n  hierarchy,\n  treemapSquarify,\n  treemapBinary,\n  treemapDice,\n  treemapResquarify,\n  treemapSlice,\n  treemapSliceDice,\n} from '@visx/hierarchy';\nimport { TileMethod } from '@visx/hierarchy/lib/types';\nimport { scaleLinear } from '@visx/scale';\n\nexport const color1 = '#f3e9d2';\nconst color2 = '#4281a4';\nexport const background = '#114b5f';\n\nconst tileMethods: { [tile: string]: TileMethod<any> } = {\n  treemapSquarify,\n  treemapBinary,\n  treemapDice,\n  treemapResquarify,\n  treemapSlice,\n  treemapSliceDice,\n};\n\nconst defaultMargin = { top: 10, left: 10, right: 10, bottom: 10 };\n\nexport type TreemapProps = {\n  width: number;\n  height: number;\n  data: any;\n  margin?: { top: number; right: number; bottom: number; left: number };\n};\n\nexport default function TreemapComponent({ width, height, data, margin = defaultMargin }: TreemapProps) {\n  const [tileMethod, setTileMethod] = useState<string>('treemapSquarify');\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  const root = hierarchy(data)\n    .sum((d) => (d.value ? d.value : 0))\n    .sort((a, b) => (b.value || 0) - (a.value || 0));\n\n  const colorScale = scaleLinear<string>({\n    domain: [0, root.value || 1],\n    range: [color2, color1],\n  });\n\n  return width < 10 ? null : (\n    <div>\n      <label>Tile Method</label>{' '}\n      <select\n        onClick={(e) => e.stopPropagation()}\n        onChange={(e) => setTileMethod(e.target.value)}\n        value={tileMethod}\n      >\n        {Object.keys(tileMethods).map((tile) => (\n          <option key={tile} value={tile}>\n            {tile}\n          </option>\n        ))}\n      </select>\n      <div>\n        <svg width={width} height={height}>\n          <rect width={width} height={height} rx={14} fill={background} />\n          <Treemap\n            top={margin.top}\n            root={root}\n            size={[xMax, yMax]}\n            tile={tileMethods[tileMethod]}\n            round\n          >\n            {(treemap) => (\n              <Group>\n                {treemap\n                  .descendants()\n                  .reverse()\n                  .map((node, i) => {\n                    const nodeWidth = node.x1 - node.x0;\n                    const nodeHeight = node.y1 - node.y0;\n                    return (\n                      <Group\n                        key={`node-${i}`}\n                        top={node.y0 + margin.top}\n                        left={node.x0 + margin.left}\n                      >\n                        <rect\n                          width={nodeWidth}\n                          height={nodeHeight}\n                          stroke={background}\n                          fill={colorScale(node.value || 0)}\n                        />\n                      </Group>\n                    );\n                  })}\n              </Group>\n            )}\n          </Treemap>\n        </svg>\n      </div>\n    </div>\n  );\n}\n"]}